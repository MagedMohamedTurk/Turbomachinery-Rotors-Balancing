# Global parameters
timeout : 0.5  # Time that cause timeout for functions

######################################################################
# Test Case Format
# function name: (as in the code file)
#   test_cases: (always the same)
#       'test_case_1': (can be renamed anything between '')
#           - Input parameters (multiple paramters should be in a list [])
#           - Expected output  (exmaple for tuple >> !!python/tuple [1, 2]) 
######################################################################


############################################################
# Testing tools
############################################################
convert_to_polar:
    test_cases : 
        'test_case_1': 
                - 6+8j
                - [10, 53.13]
        'test_case_2': 
                - -21+18j
                - [27.66, 139.4]
        'test_case_3': 
                - 12-8j
                - [14.42, 326.31]
                  
convert_to_cartesian:
    test_cases : 
        'test_case_1': 
                - [4, 30]
                - 3.4641+2j
        'test_case_2': 
                - [300, 200]
                - -281.9078-102.606j

convert_math_cart:
    test_cases : 
        'test_case_1': 
                - 4@30 
                - 3.4641+2j

convert_matrix_to_cart:
    test_cases : 
        'dummy_test_case': 
                - [[1@0, 1@0], 
                   [1@0, 1@0]]
                - [[1, 1], 
                  [1, 1]]
        'test_case_1': 
                - [[90@58, 21@140], 
                   [10.9@10, 37.9@142]]
                - [[47.69+79.32j, -16.09+13.5j], 
                  [10.74+1.89j, -29.89+23.33j]]
        'test_case_2': 
                -   - [170@112]
                    - [53@78]
                -   - [-63.68+157.62j]
                    - [11.02+51.84j]
        'test_case_3': 
                -   - 170@112
                    - 53@78
                -   - -63.68+157.62j
                    - 11.02+51.84j
                 

rmse:
    test_cases : 
        'test_case_1': 
                    -   - [17.5@230] 
                        - [30.3@0]
                    - 34.99  


############################################################
# Influence Coeffecients ALPHA
############################################################
ALPHA_direct:
    test_cases : 
        'test_case_1': 
                - [[90@58, 21@140], 
                   [10.9@10, 37.9@142]]
                - [[47.69+79.32j, -16.09+13.5j], 
                  [10.74+1.89j, -29.89+23.33j]]

ALPHA_from_matrices:
    test_cases : 
        'dummy_test_case': 
                     - -   A:
                            - [1@0]
                            - [1@0]
                           B:
                            - [2@0, 2@0]
                            - [2@0, 2@0]
                           U:
                            - 1@0 
                            - 1@0 
                           keep_trial: False
                     -    - [1@0, 1@0]
                          - [1@0, 1@0]
        'dummy_test_case 2': 
                     - -   A:
                            - [1@0]
                            - [1@0]
                           B:
                            - [3@0, 1@0]
                            - [3@0, 1@0]
                           U:
                            - 1@0 
                            - 1@0 
                           keep_trial: True

                     -    - [2@0, -2@0]
                          - [2@0, -2@0]

        'test_case_1': 
                     - -   A:
                            - [170@112]
                            - [53@78]
                           B:
                            - [235@94, 186@115]
                            - [58@68, 77@104]
                           U:
                            - 1.15@0
                            - 1.15@0


                     -    - [78.4@58, 78.8@-133]
                          - [9.45@10, 39.5@152]

############################################################
# Balancing Test cases
############################################################
least_squares:
    test_cases : 
        'test_case_1': 
                    -   
                        -  ALPHA:
                            - [78.26@58, 18.26@140]
                            - [9.48@10, 32.96@142]
                           A:
                            - [170@112]
                            - [53@78]

                    -   - [1.96@-122]
                        - [1.06@121]
        'test_case_2': 
                    -   
                        -  B:
                            - [235@94, 189@115]
                            - [58@68, 77@104]
                           A:
                            - [170@112]
                            - [53@78]
                           U:
                            - [1.15@0]
                            - [1.15@0]
                           A0:
                            - [0]
                            - [0]

                    -   - [1.96@-122]
                        - [1.06@121]
        'Balanceit_Example_Two_Plane': 
                    -   
                        - A:
                            - [.68@32]
                            - [.56@86]
                            - [1.94@231]
                            - [2.07@335]
                          B:
                            - [1.31@1,.54@9]
                            - [1.25@75, .52@75]
                            - [.93@251, .81@196]
                            - [1@342, .9@296]
                          U: 
                            - 11.1@35
                            - 3.7@135 
                          keep_trial: True

                    -   - [5.4@-137]  # Aft Plane Author stated 15.3@3deg here but                                      I believe it is a typing error as the Fwd                                         plane, rmse, and residual vibration are                                          all the same.
                        - [6.6@113]  # Fwd Plane

        'Goodman64':
            # Thomas P.Goodman one of the first who published algorithms 
            # to solve multi_plane balancing problems using Least squares.
            # The example follows is giving in his paper 'A Least-Squares Method
            # for Computing Balance Corrections', 1964
                    -   
                        -  ALPHA:
                            - [3@0, 2@180]
                            - [5@0, 2@180]
                            - [5@0, 3@180]
                           A:
                            - [1@0]
                            - [1@180]
                            - [0@0]

                    -   - [0.81@0] # First trial was the optimium solution 
                                    #(less RMS)
                        - [1.48@0]
        'Pavelek 1 ':
            # TODO
                    -   
                        -  ALPHA:
                            - [0.04@58, 0.029@47.9]
                            - [0.034@123.3, 0.051@358]
                            - [0.039@31.8, 0.025@115.4]
                            - [0.046@311.5, 0.034@57.0]
                           A:
                            - [0.97@175] # X sensor add 225 sensor angle
                            - [2.2@168] # Y sensor add 315 sensor angle
                            - [0.84@327] # X sensor add 225 sensor angle 
                            - [0.58@318.5] # Y sensor add 315 sensor angle

                    -   - [17.5@230] 
                        - [30.3@-9] # changed the correction from 0 to -9 degrees                                       to get in 5% error from manual calculations.
