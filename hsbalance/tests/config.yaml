# Global parameters
timeout : 0.5  # Time that cause timeout for functions

######################################################################
# Test Case Format
# function name: (as in the code file)
#   test_cases: (always the same)
#       'test_case_1': (can be renamed anything between '')
#           - Input parameters (multiple paramters should be in a list [])
#           - Expected output  (exmaple for tuple >> !!python/tuple [1, 2]) 
######################################################################


convert_to_polar:
    test_cases : 
        'test_case_1': 
                - 6+8j
                - [10, 53.13]
        'test_case_2': 
                - -21+18j
                - [27.66, 139.4]
        'test_case_3': 
                - 12-8j
                - [14.42, 326.31]
                  
convert_to_cartesian:
    test_cases : 
        'test_case_1': 
                - [4, 30]
                - 3.4641+2j
        'test_case_2': 
                - [300, 200]
                - -281.9078-102.606j

convert_math_cart:
    test_cases : 
        'test_case_1': 
                - 4@30 
                - 3.4641+2j

convert_matrix_to_cart:
    test_cases : 
        'test_case_1': 
                - [[90@58, 21@140], 
                   [10.9@10, 37.9@142]]
                - [[47.69+79.32j, -16.09+13.5j], 
                  [10.74+1.89j, -29.89+23.33j]]
        'test_case_2': 
                -   - [170@112]
                    - [53@78]
                -   - [-63.68+157.62j]
                    - [11.02+51.84j]


least_squares:
    test_cases : 
        'test_case_1': 
                    -   
                        -  ALPHA:
                            - [78.26@58, 18.26@140]
                            - [9.48@10, 32.96@142]
                           A:
                            - [170@112]
                            - [53@78]

                    -   - [1.96@-122]
                        - [1.06@121]

        'Goodman64':
            # Thomas P.Goodman one of the first who published algorithms 
            # to solve multi_plane balancing problems using Least squares.
            # The example follows is giving in his paper 'A Least-Squares Method
            # for Computing Balance Corrections', 1964
                    -   
                        -  ALPHA:
                            - [3@0, 2@180]
                            - [5@0, 2@180]
                            - [5@0, 3@180]
                           A:
                            - [1@0]
                            - [1@180]
                            - [0@0]

                    -   - [0.81@0] # First trial was the optimium solution 
                                    #(less RMS)
                        - [1.48@0]
